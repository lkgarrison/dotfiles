" Requires Vundle
" get Vundle with:
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Begin Plugins
" -------------

" ctrlp.vim
Plugin 'kien/ctrlp.vim'
" ignore node_modules, *.o files, etc
let g:ctrlp_custom_ignore = 'node_modules\|libs\|librar\|\.o'

" tree of files
Plugin 'scrooloose/nerdtree'
" NERDTree key mapping
:map <c-k> :NERDTree<CR>
" opens NERDTree automatically when no initial file is specified from the command line
autocmd VimEnter * if argc()==0 | NERDTree | wincmd p | endif


Plugin 'mileszs/ack.vim'

" Search within folders for text, recursively
"Plugin 'ggreer/the_silver_searcher'
"let g:ackprg = 'ag --nogroup --nocolor --column'

"asynchonous execution for vim
Plugin 'Shougo/vimproc.vim'

" typescript plugin
Plugin 'Quramy/tsuquyomi'
Plugin 'leafgarland/typescript-vim' " syntax highlighting for *.ts files

" improved html indent and syntax highlighting
" correctly indents non-standard html tags (ie angular: <custom-directive>)
Plugin 'othree/html5.vim'

" type '</' + space  in insert mode and it will automatically close the tag
" relies on othree/html5.vim plugin to recognize non-standard html tags
:iabbrev </ </<C-X><C-O><ESC>==f>a

" Enables syntax highlighting and shortcuts for ember musstache handlebars
Plugin 'mustache/vim-mustache-handlebars'
au BufReadPost *.hbs set syntax=mustache

" auto pairs for qoutes, brackets, parens
Plugin 'jiangmiao/auto-pairs'

" Advanced Git wrapper
Plugin 'tpope/vim-fugitive'

" Comments - comment any line with 'gcc'
Plugin 'tomtom/tcomment_vim'

" Smart tabs
" This is a mirror of:
" https://www.vim.org/scripts/script.php?script_id=231
Plugin 'vim-scripts/Smart-Tabs'

" Buffer Plugins
" ---------------
" Easily delete buffers without closing window using :BD
Plugin 'vim-scripts/bufkill.vim'

" don't require caps to delete buffer without closing the window
nmap :bd :BD

" allow current buffer to be hidden instead of closed when opening a buffer
set hidden

" Easier resizing of windows
if bufwinnr(1)
	" vertical adjustment
	map + <C-W>+
	map - <C-W>-

	" horizontal adjustment
	" map <C->> <C-W>>
	" map <C-<> <C-W><
endif

" Easily switch between most recently used buffers
Plugin 'vim-scripts/bufmru.vim'

" vim-airline for Tabs/multiple buffers
Plugin 'bling/vim-airline'

" How to use:
" :bd deletes current buffer
" :b# goes to previous buffer
" :b + tab will tab complete to go to one of the already open buffers
"
" ctrlp will open files in a new buffer automatically

" Always show status bar
set laststatus=2
" Use powerline fonts
let g:airline_powerline_fonts = 1

" remove arrows
let g:airline_left_sep=''
let g:airline_right_sep=''

" Show tabs
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'


" Color scheme for VIM
" Must add colors in .vim/bundle/vim-colors-solarized/colors/solarized.vim to .vim/colors
"
set term=xterm-256color
Plugin 'crusoexia/vim-monokai'
syntax enable
try
	colorscheme monokai
catch /^Vim\%((\a\+)\)\=:E185/
	:echo "Monokai color scheme missing - running ~/.dotfiles/script/bootstrap should install it"
endtry
"background = 08 - another option for background color - dark blue-green-gray

" Vim specific plugins that should not be used with neovim
if !has('nvim')
	" syntax checking
	Plugin 'scrooloose/syntastic'

	" Flake8 python linter
	Plugin 'nvie/vim-flake8'

	" vim-javascript
	Plugin 'pangloss/vim-javascript'
	" vim-jsx
	let g:syntastic_javascript_checkers = ['jshint']
	Plugin 'Shutnik/jshint2.vim'
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" Vim-specific settings that should not be used with neovim
if !has('nvim')
	" Syntastic
	let g:syntastic_c_checkers = ['gcc']
	let g:syntastic_cpp_checkers = ['gcc']
	let g:syntastic_cpp_compiler_options = '-std=c++11'
	let g:syntastic_cpp_check_header = 1
	let g:syntastic_perl_checkers = ['perl']
	let g:syntastic_enable_perl_checker = 1
	let g:syntastic_python_checkers = ['flake8']

	" Auto loc list opening
	let g:syntastic_auto_loc_list = 0
endif

" Paste toggle
set pastetoggle=<F3>

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Disable arrow keys in normal mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP> 

" Add mapping to easily add a new line above/below current line
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

" noremap q <NOP> " disables recording mode

" Easily exit insert mode by typing 'jk'
inoremap jk <esc>

" Python
" ------
" convert tabs to spaces for python files
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

" F9 will run the current python file
nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>

command StripTrailingSpaces :%s/\s\+$//e

" Configure tab handling
:set noexpandtab
:set copyindent
:set preserveindent
:set softtabstop=0
:set shiftwidth=4
:set tabstop=4

set backspace=2 " make backspace work as expected and be able to move to next line above
set number
highlight LineNR ctermfg=gray 

set autoindent    " align the new line indent with the previous line
set copyindent    " copies previous indentation on autoindentingset showmatch
set showmatch     " shows matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set incsearch     " show search matches as you type"
set hlsearch      " highlight search terms

" makes grading labs easier
:set wrap
:set textwidth=0
:set wrapmargin=0
